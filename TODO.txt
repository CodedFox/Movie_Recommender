THINGS WE COULD IMPLEMENT IN PROJECT SPECIFCATION:

Get rid of password column in users
Get rid of province column in profiles
Change user_id column to profile_id in used_devices & movie_ratings

MAKE SURE OF ACCESS OF PAGES ARE CORRECT TO CURRENT USER
VALIDATIONS FOR DATA
RECOMMENDATIONS
SEARCH BAR

Trailers

=========================================================================================

a) Display all the information about a user-specified movie. That is, the user should select
 the name of the movie from a list, and the information as contained in the movie table
 should then be displayed on the screen.

b) Display the full list of actors, and their roles, of a specific movie. That is, the user should select
the name of the movie from a list, and all the details of the actors, together with their roles,
should be displayed on the screen.

h) Find the total number of rating for each movie, for each user. That is, the data should be
grouped by the movie, the specific users and the numeric ratings they have received.

n) Find the names, join-date and profiling information (age-range, gender, and so on) of the users
that rated a specific movie (say movie Z) the most frequently. Display this information together
with their comments, if any. (Here movie Z refers to a movie of your own choice, e.g. The
Hundred Foot Journey).

Display directs in /movies/id
Display movie_casts in /movies/id
Display movie_roles in /movies/id
Display sponsors in /movies/id
Display movie_ratings in /movies/id

Display movie_topics in /movies/id
	SELECT genre_name 
	FROM topics
	INNER JOIN movie_topics
	ON topics.id = movie_topics.topic_id
	WHERE movie_topics.movie_id = @movie.id

	<% @genres = Topic.joins(:movie_topics).where(movie_topics: { movie_id: @movie.id }) %>

	<% @genres.each do |genre| %>
	  <%= genre.genre_name %>
	<% end %>



c) For each user-specified category of movie, list the details of the director(s) and studio(s),
together with the date that the movie has been released. The user should be able to select the
category (e.g. Horror or Nature) from a list.

Display directs in /topics/id
Display sponsors in /topics/id

Display movie_topics in /topics/id
	SELECT movies.*
	FROM movies
	INNER JOIN movie_topics
	ON movies.id = movie_topics.movie_id
	WHERE movie_topics.topic_id = @topic.id
	
	<% @movies = Movie.joins(:movie_topics).where(movie_topics: { topic_id: @topic.id }) %>

	<table>
	  <thead>
		<tr>
		  <th></th>
		  <th>Movie Name</th>
		  <th>Description</th>
		  <th>Date released</th>
		  <th>Duration</th>
		  <th>Language</th>
		  <th>Subtitles</th>
		  <th>Dubbed</th>
		  <th>Country</th>
		  <th>Age rating</th>
		  <th colspan="3"></th>
		</tr>
	  </thead>

	  <tbody>
		<% @movies.each do |movie| %>
		  <tr>
			<td><img src="<%= movie.poster %>" style="width: 75px"></td>
			<td><%= movie.movie_name %></td>
			<td id="td1"><%= movie.description %></td>
			<td><%= movie.date_released %></td>
			<td>
			  <% if movie.duration.hour == 0 %><%= movie.duration.strftime('%Mm') %>
			  <% else %>
				<%= movie.duration.strftime('%kh %Mm') %>
			  <% end %>
			</td>
			<td><%= movie.language %></td>
			<td><%= movie.subtitles %></td>
			<td><%= movie.dubbed %></td>
			<td><%= movie.country %></td>
			<td><%= movie.age_rating %></td>

			<td><%= link_to 'Show', movie %></td>
		  </tr>
		<% end %>
	  </tbody>
	</table>

	
	
d) Display the information about the actor that appeared the most often in the movies, as
contained in your database. Display this information together with the details of the director(s)
and the studio(s) that s(he) worked with.

e) Display the information about the two actors that appeared the most often together in the
movies, as contained in your database.

Display movie_casts in /home
Display directs in /home
Display sponsors in /home



f) Find the names of the ten movies with the highest overall ratings in your database.

g) Find the movie(s) with the highest overall rating in your database. Display all the movie details,
together with the topics (tags) associated with it.

i) Display the details of the movies that have not been rated since January 2016.

m) Find the names, join-date and profiling information (age-range, gender, and so on) of the users
that give the highest overall ratings. Display this information together with the names of the
movies and the dates the ratings were done.

Display movie_ratings in /home
Display movie_topics in /home



j) Find the names, release dates and the names of the directors of the movies that obtained rating
that is lower than any rating given by user X. Order your results by the dates of the ratings.
(Here, X refers to any user of your choice.)

DO THIS LAST



k) List the details of the Type Y movie that obtained the highest rating. Display the movie name
together with the name(s) of the rater(s) who gave these ratings. (Here, Type Y refers to any
movie type of your choice, e.g. Horror or Romance.)

Display movie_ratings in /topics



l) Provide a query to determine whether Type Y movies are “more popular” than other movies.
(Here, Type Y refers to any movie type of your choice, e.g. Nature.) Yes, this query is open to
your own interpretation!

DO THIS LAST



o) Find the names and emails of all users who gave ratings that are lower than that of a rater with
a name called John Smith. (Note that there may be more than one rater with this name).

DO THIS LAST



p) Find the names and emails of the users that provide the most diverse ratings within a specific
genre. Display this information together with the movie names and the ratings. For example,
Jane Doe may have rated terminator 1 as a 1, Terminator 2 as a 10 and Terminator 3 as a 3.
Clearly, she changes her mind quite often!

Display movie_ratings in /topics/id



=========================================================================================
	
IN /USERS/ID, DISPLAY:
	profile
	likes_topics
		SELECT genre_name
		FROM topics
		INNER JOIN likes_topics
		ON topics.id = likes_topics.topic_id
		WHERE likes_topics.profile_id = @profile.id
		
		<% @genres = Topic.joins(:likes_topics).where(likes_topics: { profile_id: @profile.id }) %>

		<% @genres.each do |genre| %>
		  <%= genre.genre_name %>
		<% end %>
		
	used_devices
	movie_ratings



IN /TOPICS/ID, DISPLAY:
	movie_topics
		c)

IN /MOVIES/ID
	movie_topics
		a), b), h), n)
	directs
		a), b), h), n)
	movie_roles
		a), b), h), n)
	movie_casts
		a), b), h), n)
	sponsors
		a), b), h), n)
	movie_ratings
		a), b), h), n)
		
IN /ACTORS/ID, DISPLAY:
	movie_casts
	actor_roles
	
IN /DIRECTORS/ID, DISPLAY:
	directs
	
IN /STUDIOS/ID, DISPLAY:
	sponsors
	

	